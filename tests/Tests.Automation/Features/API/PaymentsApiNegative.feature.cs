// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Tests.Automation.Features.API
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PaymentsAPINegativeCasesFeature : object, global::Xunit.IClassFixture<PaymentsAPINegativeCasesFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/API", "Payments API negative cases", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public PaymentsAPINegativeCasesFeature(PaymentsAPINegativeCasesFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/API/PaymentsApiNegative.feature.ndjson", 5);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Invalid bank details return 422")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Payments API negative cases")]
        [global::Xunit.TraitAttribute("Description", "Invalid bank details return 422")]
        [global::Xunit.TraitAttribute("Category", "api")]
        [global::Xunit.TraitAttribute("Category", "http")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        public async global::System.Threading.Tasks.Task InvalidBankDetailsReturn422()
        {
            string[] tagsOfScenario = new string[] {
                    "api",
                    "http",
                    "negative"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid bank details return 422", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("a bank payment \"Alice\" \"10-11-12\" \"BADACCT\" 0 \"GBP\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("I submit the payment via API with case \"invalid\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the API should return status code 422 and error \"invalid_payment_details\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Unsupported method returns 400")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Payments API negative cases")]
        [global::Xunit.TraitAttribute("Description", "Unsupported method returns 400")]
        [global::Xunit.TraitAttribute("Category", "api")]
        [global::Xunit.TraitAttribute("Category", "http")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        public async global::System.Threading.Tasks.Task UnsupportedMethodReturns400()
        {
            string[] tagsOfScenario = new string[] {
                    "api",
                    "http",
                    "negative"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Unsupported method returns 400", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("a payment request with method \"crypto\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("I submit the payment via API with case \"unsupported\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the API should return status code 400 and error \"unsupported_method\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Bank outage returns 503")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Payments API negative cases")]
        [global::Xunit.TraitAttribute("Description", "Bank outage returns 503")]
        [global::Xunit.TraitAttribute("Category", "api")]
        [global::Xunit.TraitAttribute("Category", "http")]
        [global::Xunit.TraitAttribute("Category", "negative")]
        public async global::System.Threading.Tasks.Task BankOutageReturns503()
        {
            string[] tagsOfScenario = new string[] {
                    "api",
                    "http",
                    "negative"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Bank outage returns 503", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                await testRunner.GivenAsync("a bank payment \"Bob\" \"10-11-12\" \"12345678\" 10.50 \"GBP\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
                await testRunner.WhenAsync("I submit the payment via API with case \"fail\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.ThenAsync("the API should return status code 503 and error \"bank_unavailable\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await PaymentsAPINegativeCasesFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await PaymentsAPINegativeCasesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
