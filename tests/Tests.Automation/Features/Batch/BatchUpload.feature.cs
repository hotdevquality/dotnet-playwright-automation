// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Tests.Automation.Features.Batch
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BatchUploadViaSFTPFeature : object, global::Xunit.IClassFixture<BatchUploadViaSFTPFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Batch", "Batch upload via SFTP", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
        public BatchUploadViaSFTPFeature(BatchUploadViaSFTPFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/Batch/BatchUpload.feature.ndjson", 7);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Upload CSV batch")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Batch upload via SFTP")]
        [global::Xunit.TraitAttribute("Description", "Upload CSV batch")]
        [global::Xunit.TraitAttribute("Category", "batch")]
        [global::Xunit.TraitAttribute("Category", "sftp")]
        [global::Xunit.TraitAttribute("Category", "csv")]
        public async global::System.Threading.Tasks.Task UploadCSVBatch()
        {
            string[] tagsOfScenario = new string[] {
                    "batch",
                    "sftp",
                    "csv"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Upload CSV batch", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Country",
                            "Method",
                            "Recipient",
                            "SortCode",
                            "AccountNumber",
                            "Iban",
                            "Amount",
                            "Currency"});
                table1.AddRow(new string[] {
                            "UK",
                            "bank",
                            "Alice",
                            "10-11-12",
                            "12345678",
                            "",
                            "100.5",
                            "GBP"});
                table1.AddRow(new string[] {
                            "EU",
                            "bank",
                            "Bob",
                            "",
                            "",
                            "DE12345678901234567890",
                            "55.75",
                            "EUR"});
                await testRunner.GivenAsync("a batch containing the following payments", ((string)(null)), table1, "Given ");
                await testRunner.WhenAsync("I build a CSV batch file", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.AndAsync("I upload the batch to SFTP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.ThenAsync("the file should exist in the SFTP inbound folder", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Upload Excel batch")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Batch upload via SFTP")]
        [global::Xunit.TraitAttribute("Description", "Upload Excel batch")]
        [global::Xunit.TraitAttribute("Category", "batch")]
        [global::Xunit.TraitAttribute("Category", "sftp")]
        [global::Xunit.TraitAttribute("Category", "excel")]
        public async global::System.Threading.Tasks.Task UploadExcelBatch()
        {
            string[] tagsOfScenario = new string[] {
                    "batch",
                    "sftp",
                    "excel"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Upload Excel batch", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Country",
                            "Method",
                            "Recipient",
                            "SortCode",
                            "AccountNumber",
                            "Iban",
                            "Amount",
                            "Currency"});
                table2.AddRow(new string[] {
                            "UK",
                            "bank",
                            "Alice",
                            "10-11-12",
                            "12345678",
                            "",
                            "100.5",
                            "GBP"});
                table2.AddRow(new string[] {
                            "EU",
                            "bank",
                            "Bob",
                            "",
                            "",
                            "DE12345678901234567890",
                            "55.75",
                            "EUR"});
                await testRunner.GivenAsync("a batch containing the following payments", ((string)(null)), table2, "Given ");
                await testRunner.WhenAsync("I build an Excel batch file", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.AndAsync("I upload the batch to SFTP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.ThenAsync("the file should exist in the SFTP inbound folder", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Build CSV batch for different methods")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Batch upload via SFTP")]
        [global::Xunit.TraitAttribute("Description", "Build CSV batch for different methods")]
        [global::Xunit.TraitAttribute("Category", "batch")]
        [global::Xunit.TraitAttribute("Category", "sftp")]
        [global::Xunit.TraitAttribute("Category", "csv")]
        [global::Xunit.TraitAttribute("Category", "methods")]
        [global::Xunit.InlineDataAttribute("UK", "cheque", "GBP", "2", new string[0])]
        [global::Xunit.InlineDataAttribute("UK", "credit card", "GBP", "3", new string[0])]
        [global::Xunit.InlineDataAttribute("EU", "paypal", "EUR", "4", new string[0])]
        public async global::System.Threading.Tasks.Task BuildCSVBatchForDifferentMethods(string country, string method, string currency, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "batch",
                    "sftp",
                    "csv",
                    "methods"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Method", method);
            argumentsOfScenario.Add("Currency", currency);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Build CSV batch for different methods", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
            this.ScenarioInitialize(scenarioInfo, ruleInfo);
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Country",
                            "Method",
                            "Recipient",
                            "SortCode",
                            "AccountNumber",
                            "Iban",
                            "Amount",
                            "Currency"});
                table3.AddRow(new string[] {
                            string.Format("{0}", country),
                            string.Format("{0}", method),
                            "Alice",
                            "10-11-12",
                            "12345678",
                            "DE12345678901234567890",
                            "42.00",
                            string.Format("{0}", currency)});
                await testRunner.GivenAsync("a batch containing the following payments", ((string)(null)), table3, "Given ");
                await testRunner.WhenAsync("I build a CSV batch file", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
                await testRunner.AndAsync("I upload the batch to SFTP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
                await testRunner.ThenAsync("the file should exist in the SFTP inbound folder", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await BatchUploadViaSFTPFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await BatchUploadViaSFTPFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
